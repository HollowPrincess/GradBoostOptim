{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"xgboost","provenance":[],"collapsed_sections":["I73ujbmkvKFV","0cLj0WQcADuI","3dCbszLY8Jen","3DWEBnHzAMco","SphoM5_38Cyy"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"I73ujbmkvKFV","colab_type":"text"},"source":["# Imports"]},{"cell_type":"code","metadata":{"id":"1mjtAzjT7JpM","colab_type":"code","colab":{}},"source":["#installation:\n","#!pip install googledrivedownloader"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"-fHulZLRlJP0","colab_type":"code","colab":{}},"source":["import warnings\n","warnings.filterwarnings('ignore')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gd2b0tAA7NVV","colab_type":"code","colab":{}},"source":["#imports:\n","import pandas as pd\n","import numpy as np\n","import math\n","\n","from sklearn.utils import shuffle\n","from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.decomposition import TruncatedSVD\n","\n","from matplotlib import pyplot as plt"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0cLj0WQcADuI","colab_type":"text"},"source":["# Data upload"]},{"cell_type":"code","metadata":{"id":"COWbkB5lU3a6","colab_type":"code","outputId":"4d422542-7943-4d1d-96fe-3ca942af14e4","executionInfo":{"status":"ok","timestamp":1573124965483,"user_tz":-180,"elapsed":3994,"user":{"displayName":"Света Сорокина","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD4mfr_6sxUlbvVspkY1FW-ZT_JAX4yiTMHxVQ9=s64","userId":"00408643672459262753"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["!mkdir data_files\n","\n","import os.path\n","os.chdir('/content/data_files')\n","\n","from google_drive_downloader import GoogleDriveDownloader as gdd\n","gdd.download_file_from_google_drive(file_id='1Vy6G1IFiWdTGoHo7YaNVYw7v9Xw3XnuT',\n","                                    dest_path='/content/data_files/Features_Variant_1.zip',\n","                                    unzip=True)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["mkdir: cannot create directory ‘data_files’: File exists\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3dCbszLY8Jen","colab_type":"text"},"source":["# Metrics"]},{"cell_type":"code","metadata":{"id":"zYgEguku8Mt-","colab_type":"code","colab":{}},"source":["def custom_R2(target, pred):\n","    return 1-(np.sum((target-pred)**2))/(np.sum((target-np.mean(target))**2))\n","\n","def custom_RMSE(target, pred, gamma, w):\n","    return np.sqrt(\n","        np.sum((target-pred)**2)/len(pred)+gamma*np.linalg.norm(w)\n","    )"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DUxVCwgqvhF-","colab_type":"text"},"source":["# Preparation"]},{"cell_type":"markdown","metadata":{"id":"3DWEBnHzAMco","colab_type":"text"},"source":["## DataFrame Preparation"]},{"cell_type":"code","metadata":{"id":"yfEWZzleYDnM","colab_type":"code","colab":{}},"source":["data=pd.read_csv('/content/data_files/Features_Variant_1.csv', header=None).drop_duplicates()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lnmU0-DWYNwh","colab_type":"code","colab":{}},"source":["#get and fit features names\n","features_names=np.array(['page_likes_num',#1\n","               'page_checkins',#2\n","               'page_talking_about',#3\n","                'page_cat',#4\n","                'page_statistics',#5-29 #mean, avg etc.\n","                'comments_num_before_base_time',#30\n","                'comments_num_in_last_24_hours',#31 #last day\n","                'comments_num_in_last_48_to_24_hours',#32 #day before last\n","                'comments_num_in_first_24_hours',#33\n","                'comments_difference_in_last_two_days', #34 (32-31)\n","                'base_time', #35\n","                'character_num_in_post', #36\n","                'share_num',#37\n","                'post_promotion', #38 binary\n","                'h_local', #39 This describes the H hrs, for which we have the target variable/ comments received. \n","                'post_published_weekday', #40-46 This represents the day(Sunday...Saturday) on which the post was published. \n","                'base_datetime_weekday', #47-53 This represents the day(Sunday...Saturday) on selected base Date/Time. \n","                'target' #54 The no of comments in next H hrs(H is given in Feature no 39).                \n","               ])\n","\n","for index in range(5,29):\n","    features_names=np.insert(features_names, index, features_names[4]+'_'+str(index-4))\n","    \n","weekday=('sunday', 'monday','tuesday', 'wednesday', 'thursday', 'friday', 'saturday')    \n","\n","for index in range(40,47):\n","    features_names=np.insert(features_names,index, features_names[39]+'_'+ weekday[index-40])\n","features_names=np.delete(features_names, 39)\n","\n","for index in range(47,54):\n","    features_names=np.insert(features_names,index, features_names[46]+'_'+ weekday[index-47])\n","features_names=np.delete(features_names, 46)\n","\n","data.columns=features_names"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DFri2mdN78ri","colab_type":"code","colab":{}},"source":["data=data.drop(columns=['post_promotion']) #post promotion has only zero values we can drop this col because it isn't informative"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SphoM5_38Cyy","colab_type":"text"},"source":["## Data preparation"]},{"cell_type":"code","metadata":{"id":"SsJt31hB7_6G","colab_type":"code","colab":{}},"source":["#categories:\n","data=data.drop(columns=['page_cat'])\n","\n","data=pd.concat([data,pd.get_dummies(data['h_local'], prefix='h_local')], axis=1)\n","data=data.drop(columns=['h_local'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aFU5gRgQ8GpP","colab_type":"code","colab":{}},"source":["#data shuffling\n","data=shuffle(data).reset_index(drop=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fio9GzrxlwMi","colab_type":"code","colab":{}},"source":["#new features:\n","data['comm_part_1']=data['comments_num_in_last_24_hours']/(data['comments_num_before_base_time']+1)\n","data['comm_part_4']=(data['comments_num_in_last_24_hours']-data['comments_num_in_last_48_to_24_hours'])/(data['comments_num_in_last_48_to_24_hours']+1)\n","data['comm_part_5']=(data['comments_num_in_last_24_hours']-data['comments_num_in_last_48_to_24_hours'])/(data['comments_num_before_base_time']+1)\n","\n","#drop extra features:\n","data=data.drop(columns=[\n","                        'page_likes_num', \n","                        'page_checkins', \n","                        'page_statistics_10',\n","                        'page_statistics_23', \n","                        'page_statistics_15',\n","                        'page_statistics_16',\n","                        'page_statistics_17',\n","                        'page_statistics_18',\n","                        'page_statistics_19',\n","                        'page_statistics_21',\n","                        'comments_num_in_first_24_hours',\n","       \n","       'character_num_in_post', \n","\n","       'post_published_weekday_sunday', 'post_published_weekday_monday',\n","       'post_published_weekday_tuesday', 'post_published_weekday_wednesday',\n","       'post_published_weekday_thursday', 'post_published_weekday_friday',\n","       'post_published_weekday_saturday', \n","\n","       'base_datetime_weekday_sunday',\n","       'base_datetime_weekday_monday', 'base_datetime_weekday_tuesday',\n","       'base_datetime_weekday_wednesday', 'base_datetime_weekday_thursday',\n","       'base_datetime_weekday_friday', 'base_datetime_weekday_saturday'])\n","\n","# features transformation:\n","data['comments_num_in_last_48_to_24_hours']=data['comments_num_in_last_48_to_24_hours'].apply(lambda x: 0 if x==0 else 1)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1KFC7qG88SM0","colab_type":"text"},"source":["# Model"]},{"cell_type":"code","metadata":{"id":"dR1Lr4UPGRua","colab_type":"code","colab":{}},"source":["import time\n","import xgboost\n","\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import KFold\n","\n","from sklearn.metrics import r2_score\n","from sklearn.metrics import mean_squared_error\n","from sklearn.model_selection import GridSearchCV \n","\n","x_cols = data.columns.to_list()\n","x_cols.remove('target')\n","\n","def runXGBoost(data, train_index, test_index, x_cols, params=None): \n","    \n","    if params:\n","        model = xgboost.XGBRegressor(verbosity=0,**param_set)\n","    else:\n","        model = xgboost.XGBRegressor(verbosity=0)\n","\n","    #train model:\n","    t0 = time.time()\n","    model.fit(data.loc[train_index,x_cols], data.loc[train_index,'target'])\n","    #get prediction:\n","    pred=model.predict(data.loc[test_index,x_cols])\n","    model_time = time.time()-t0\n","\n","    #get scores:\n","    r2, RMSE = getMetrics(pred, data.loc[test_index,'target'])\n","    return r2, RMSE, model_time\n","\n","def getMetrics(pred, target):\n","    r2 = r2_score(target, pred)\n","    rmse = np.sqrt(mean_squared_error(target, pred))\n","    return r2, rmse"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"VG2oyg5wx5WF","colab_type":"code","colab":{}},"source":["# cross-val for default model\n","folds_num=5\n","#model = xgboost.XGBRegressor()\n","kf = KFold(n_splits=folds_num)\n","res=np.array([], dtype=float) \n","for train_index, test_index in kf.split(data.loc[:,x_cols]):\n","    #normalization:\n","    scaler = StandardScaler() \n","    data.loc[train_index,x_cols]=scaler.fit_transform(data.loc[train_index,x_cols])\n","    data.loc[test_index,x_cols]=scaler.transform(data.loc[test_index,x_cols])\n","    r2, RMSE, model_time=runXGBoost(data, train_index, test_index, x_cols, params=None)\n","    res=np.append(res, [r2, RMSE, model_time])\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UyHXMbFz_C37","colab_type":"code","colab":{}},"source":["res=pd.DataFrame(res.reshape(folds_num,3), columns=['r2','RMSE', 'time (sec)'])\n","res['params']='default'\n","res['experiment name']='default params'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mkrHxeYBAX5B","colab_type":"code","outputId":"999ea3c5-eb5a-425e-ee2a-a362ae08b4ff","executionInfo":{"status":"ok","timestamp":1573124990558,"user_tz":-180,"elapsed":28767,"user":{"displayName":"Света Сорокина","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mD4mfr_6sxUlbvVspkY1FW-ZT_JAX4yiTMHxVQ9=s64","userId":"00408643672459262753"}},"colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["res"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>r2</th>\n","      <th>RMSE</th>\n","      <th>time (sec)</th>\n","      <th>params</th>\n","      <th>experiment name</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.700714</td>\n","      <td>18.728876</td>\n","      <td>4.284577</td>\n","      <td>default</td>\n","      <td>default params</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.630707</td>\n","      <td>21.625054</td>\n","      <td>4.278660</td>\n","      <td>default</td>\n","      <td>default params</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.618493</td>\n","      <td>21.971080</td>\n","      <td>4.265767</td>\n","      <td>default</td>\n","      <td>default params</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.696185</td>\n","      <td>18.883204</td>\n","      <td>4.261695</td>\n","      <td>default</td>\n","      <td>default params</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.592650</td>\n","      <td>24.073548</td>\n","      <td>4.260469</td>\n","      <td>default</td>\n","      <td>default params</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         r2       RMSE  time (sec)   params experiment name\n","0  0.700714  18.728876    4.284577  default  default params\n","1  0.630707  21.625054    4.278660  default  default params\n","2  0.618493  21.971080    4.265767  default  default params\n","3  0.696185  18.883204    4.261695  default  default params\n","4  0.592650  24.073548    4.260469  default  default params"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"9IA_ppSPUOQV","colab_type":"code","colab":{}},"source":["# tree booster parameters:\n","\n","# eta[default=0.3] in  0.01-0.2\n","# min_child_weight [default=1] \n","# max_depth [default=6] Typical values: 3-10\n","# max_leaf_nodes\n","# gamma [default=0]\n","# max_delta_step [default=0]\n","\n","# subsample [default=1] Typical values: 0.5-1\n","# colsample_bytree [default=1] Typical values: 0.5-1\n","# colsample_bylevel [default=1]\n","\n","# lambda [default=1] L2 regularization term on weights - use it\n","# alpha [default=0] L1 regularization term on weight - use it i.e. 'reg_alpha':[0, 0.001, 0.005, 0.01, 0.05] (0.005 was chosen in example)\n","\n","# scale_pos_weight [default=1] must be = 1 when there are a high disbalance\n","\n","\n","# let's have a look at:\n","# max_depth = 5 : This should be between 3-10\n","# min_child_weight [1 .. 6]\n","# alpha [0, 0.001, 0.005, 0.01]\n","# lambda ?"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"qIGJxgEYBE9x","colab_type":"code","colab":{}},"source":["# grid search\n","from sklearn.model_selection import ParameterGrid\n","\n","params_list=ParameterGrid({'max_depth': [3, 5, 10], 'min_child_weight': [1, 3, 6], 'alpha':[0,0.005,0.01], 'lambda':[0,0.005,0.01]})\n","model=xgboost.XGBRegressor()\n","new_res=[]\n","for param_set in params_list:\n","    for train_index, test_index in kf.split(data.loc[:,x_cols]):\n","        #normalization:\n","        scaler = StandardScaler() \n","        data.loc[train_index,x_cols]=scaler.fit_transform(data.loc[train_index,x_cols])\n","        data.loc[test_index,x_cols]=scaler.transform(data.loc[test_index,x_cols])\n","        r2, RMSE, model_time=runXGBoost(data, train_index, test_index, x_cols, params=param_set)\n","        new_res.append([param_set,r2, RMSE, model_time])\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kYd6mv67geKo","colab_type":"code","colab":{}},"source":["out_res=pd.DataFrame(new_res,columns=['params','r2','RMSE', 'time (sec)'])\n","out_res['experiment name']='grid search for 4 params'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CLmzzYtk9Q8l","colab_type":"code","colab":{}},"source":["out_res=pd.concat([out_res, new_res])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jyADXVoU85fc","colab_type":"code","colab":{}},"source":["# random search \n","from scipy.stats import uniform\n","from scipy.stats import randint as sp_randint\n","\n","param_dist = {\"max_depth\": sp_randint(3, 10),\n","              \"min_child_weight\": sp_randint(1, 10),\n","              \"alpha\": uniform(loc=0, scale=0.1),\n","              \"lambda\": uniform(loc=0, scale=0.1) }\n","\n","# run randomized search\n","n_iter_search = 81\n","random_search = RandomizedSearchCV(clf, param_distributions=param_dist,\n","                                   n_iter=n_iter_search, cv=5, iid=False)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZmrEBmSo98IS","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}